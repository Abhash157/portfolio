document.addEventListener('DOMContentLoaded', function() {
    // ========== DOM Elements ==========
    const terminalBody = document.getElementById('terminal-body');
    const commandLine = document.querySelector('.command-line');
    const commandText = document.getElementById('command-text');
    const cursor = document.getElementById('cursor');
    const navbar = document.querySelector('.main-nav');
    const menuToggle = document.querySelector('.menu-toggle');
    const navLinks = document.querySelector('.nav-links');
    const contactForm = document.getElementById('contact-form');
    
    // ========== Terminal State ==========
    let commandHistory = [];
    let historyIndex = -1;
    let currentCommand = '';
    let isProcessing = false;
    
    // ========== JARVIS Responses ==========
    const responses = {
        help: `
Available commands:
  about     - Learn more about me
  skills    - View my technical skills
  projects  - See my featured projects
  contact   - Get in touch with me
  clear     - Clear the terminal
  date      - Show current date and time
  theme     - Change terminal theme
  help      - Show this help message
`,
        about: `
J.A.R.V.I.S. v2.5 - Just A Rather Very Intelligent System

I am an advanced AI assistant designed to showcase the portfolio of my creator. 
My primary functions include providing information about skills, projects, 
and facilitating communication with potential collaborators.

Type 'skills' to view technical capabilities or 'projects' to see recent work.
`,
        skills: `
TECHNICAL PROFICIENCIES:

• Frontend: HTML5, CSS3, JavaScript (ES6+), React, Vue.js
• Backend: Node.js, Python, Express, Django, RESTful APIs
• Databases: MongoDB, PostgreSQL, Firebase
• Tools: Git, Docker, AWS, Webpack, Babel
• Design: UI/UX, Responsive Design, Figma, Adobe XD

For more details, please visit the skills section below.
`,
        projects: `
FEATURED PROJECTS:

1. Project Aurora - A revolutionary AI platform
   • React, Node.js, TensorFlow
   • Real-time data processing
   • Machine learning integration

2. Nebula Dashboard
   • Vue.js, D3.js, Express
   • Data visualization suite
   • Customizable widgets

Scroll down to view project details and links.
`,
        contact: `
CONTACT INFORMATION:

Email: contact@yourdomain.com
GitHub: github.com/yourusername
LinkedIn: linkedin.com/in/yourprofile
Twitter: @yourhandle

For business inquiries or collaboration opportunities, 
please use the contact form below.
`,
        date: () => `Current date and time: ${new Date().toLocaleString()}`,
        
        theme: (args) => {
            const theme = args[0];
            const themes = {
                'default': { bg: 'rgba(0, 10, 20, 0.95)', border: 'rgba(0, 255, 255, 0.2)' },
                'matrix': { bg: 'rgba(0, 30, 0, 0.95)', border: 'rgba(0, 255, 0, 0.3)' },
                'neon': { bg: 'rgba(30, 0, 30, 0.95)', border: 'rgba(255, 0, 255, 0.3)' },
                'ocean': { bg: 'rgba(0, 20, 40, 0.95)', border: 'rgba(0, 200, 255, 0.3)' }
            };
            
            if (theme && themes[theme]) {
                const terminal = document.querySelector('.terminal');
                terminal.style.background = themes[theme].bg;
                terminal.style.borderColor = themes[theme].border;
                return `Theme changed to: ${theme}`;
            }
            return `Available themes: ${Object.keys(themes).join(', ')}`;
        },
        clear: ''
    };

    // ========== Terminal Functions ==========
    async function typeWriter(text, element, speed = 20) {
        return new Promise(resolve => {
            let i = 0;
            const type = () => {
                if (i < text.length) {
                    element.textContent += text.charAt(i);
                    i++;
                    setTimeout(type, Math.random() * 30 + speed);
                } else {
                    resolve();
                }
            };
            type();
        });
    }

    async function printToTerminal(text, className = '') {
        const line = document.createElement('div');
        if (className) line.className = className;
        terminalBody.insertBefore(line, commandLine);
        await typeWriter(text, line);
        return line;
    }

    async function processCommand(command) {
        if (isProcessing) return;
        isProcessing = true;
        
        // Add command to history
        if (command.trim() !== '' && command !== commandHistory[commandHistory.length - 1]) {
            commandHistory.push(command);
            historyIndex = commandHistory.length;
        }
        
        // Show command in terminal
        const cmdLine = document.createElement('div');
        cmdLine.className = 'command-line';
        cmdLine.innerHTML = `<span class="prompt">user@portfolio:~$</span> <span class="command-text">${command}</span>`;
        terminalBody.insertBefore(cmdLine, commandLine);
        
        // Process command
        const [cmd, ...args] = command.trim().split(' ');
        
        // Add slight delay before response
        await new Promise(resolve => setTimeout(resolve, 200));
        
        if (cmd === 'clear') {
            // Clear terminal
            while (terminalBody.firstChild !== commandLine) {
                terminalBody.removeChild(terminalBody.firstChild);
            }
        } else if (responses[cmd]) {
            // Handle commands with responses
            const responseText = typeof responses[cmd] === 'function' 
                ? responses[cmd](args) 
                : responses[cmd];
            
            if (responseText) {
                await printToTerminal(responseText, 'command-response');
            }
        } else if (cmd) {
            // Command not found
            await printToTerminal(`Command not found: ${cmd}\nType 'help' for available commands.`, 'command-error');
        }
        
        // Scroll to bottom
        terminalBody.scrollTop = terminalBody.scrollHeight;
        isProcessing = false;
    }

    async function initTerminal() {
        // Initial greeting
        await printToTerminal('Initializing J.A.R.V.I.S. v2.5...');
        await new Promise(resolve => setTimeout(resolve, 500));
        await printToTerminal('Checking system status...');
        await new Promise(resolve => setTimeout(resolve, 300));
        await printToTerminal('Establishing secure connection...');
        await new Promise(resolve => setTimeout(resolve, 700));
        await printToTerminal('\n> Welcome to the portfolio terminal interface.');
        await printToTerminal('> Type \'help\' to see available commands.\n');
        
        // Focus on terminal
        commandLine.scrollIntoView();
    }

    // ========== Event Listeners ==========
    document.addEventListener('keydown', async (e) => {
        if (document.activeElement === document.body) {
            // Handle typing in terminal
            if (e.key.length === 1) {
                currentCommand += e.key;
                commandText.textContent = currentCommand;
            } else if (e.key === 'Backspace') {
                currentCommand = currentCommand.slice(0, -1);
                commandText.textContent = currentCommand;
            } else if (e.key === 'Enter' && currentCommand.trim() !== '') {
                const cmd = currentCommand;
                currentCommand = '';
                commandText.textContent = '';
                await processCommand(cmd);
            } else if (e.key === 'ArrowUp') {
                // Command history navigation
                if (commandHistory.length > 0 && historyIndex > 0) {
                    historyIndex--;
                    currentCommand = commandHistory[historyIndex];
                    commandText.textContent = currentCommand;
                }
            } else if (e.key === 'ArrowDown') {
                if (historyIndex < commandHistory.length - 1) {
                    historyIndex++;
                    currentCommand = commandHistory[historyIndex] || '';
                    commandText.textContent = currentCommand;
                } else {
                    historyIndex = commandHistory.length;
                    currentCommand = '';
                    commandText.textContent = '';
                }
            } else if (e.key === 'Tab') {
                e.preventDefault();
                // Simple tab completion
                const commands = Object.keys(responses);
                const input = currentCommand.toLowerCase();
                const matches = commands.filter(cmd => cmd.startsWith(input));
                
                if (matches.length === 1) {
                    currentCommand = matches[0];
                    commandText.textContent = currentCommand;
                } else if (matches.length > 1) {
                    // Show possible completions
                    await printToTerminal('\n' + matches.join('  '), 'command-suggestion');
                    terminalBody.scrollTop = terminalBody.scrollHeight;
                }
            }
        }
    });

    // Click anywhere to focus terminal
    document.addEventListener('click', () => {
        commandLine.focus();
    });

    // Smooth scrolling for navigation links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function(e) {
            e.preventDefault();
            const targetId = this.getAttribute('href');
            if (targetId === '#') return;
            
            const targetSection = document.querySelector(targetId);
            if (targetSection) {
                targetSection.scrollIntoView({ behavior: 'smooth' });
            }
        });
    });

    // Navbar scroll effect
    window.addEventListener('scroll', () => {
        if (window.scrollY > 50) {
            navbar.classList.add('scrolled');
        } else {
            navbar.classList.remove('scrolled');
        }
    });

    // Mobile menu toggle
    if (menuToggle) {
        menuToggle.addEventListener('click', () => {
            navLinks.classList.toggle('active');
            menuToggle.classList.toggle('active');
        });

        // Close mobile menu when clicking on a nav link
        document.querySelectorAll('.nav-links a').forEach(link => {
            link.addEventListener('click', () => {
                navLinks.classList.remove('active');
                menuToggle.classList.remove('active');
            });
        });
    }

    // Animate skill bars when in viewport
    function animateSkills() {
        const skillBars = document.querySelectorAll('.skill-progress');
        skillBars.forEach(bar => {
            if (isElementInViewport(bar)) {
                const width = bar.getAttribute('data-level');
                bar.style.width = width;
            }
        });
    }

    // Check if element is in viewport
    function isElementInViewport(el) {
        const rect = el.getBoundingClientRect();
        return (
            rect.top >= 0 &&
            rect.left >= 0 &&
            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
            rect.right <= (window.innerWidth || document.documentElement.clientWidth)
        );
    }

    // Initialize particles.js
    if (typeof particlesJS !== 'undefined') {
        particlesJS('particles-js', {
            particles: {
                number: { value: 80, density: { enable: true, value_area: 800 } },
                color: { value: '#00ffff' },
                shape: { type: 'circle' },
                opacity: { value: 0.5, random: true },
                size: { value: 3, random: true },
                line_linked: {
                    enable: true,
                    distance: 150,
                    color: '#00ffff',
                    opacity: 0.4,
                    width: 1
                },
                move: {
                    enable: true,
                    speed: 2,
                    direction: 'none',
                    random: true,
                    straight: false,
                    out_mode: 'out',
                    bounce: false
                }
            },
            interactivity: {
                detect_on: 'canvas',
                events: {
                    onhover: { enable: true, mode: 'repulse' },
                    onclick: { enable: true, mode: 'push' },
                    resize: true
                },
                modes: {
                    repulse: { distance: 100, duration: 0.4 },
                    push: { particles_nb: 4 }
                }
            },
            retina_detect: true
        });
    }

    // Animate elements on scroll
    function animateOnScroll() {
        const elements = document.querySelectorAll('.fade-in, .slide-in, .animate-on-scroll');
        elements.forEach(element => {
            if (isElementInViewport(element)) {
                element.classList.add('visible');
                if (element.classList.contains('skill-progress') && !element.style.width) {
                    const width = element.getAttribute('data-level');
                    element.style.width = width;
                }
            }
        });
    }

    // Set current year in footer
    const yearElement = document.getElementById('year');
    if (yearElement) {
        yearElement.textContent = new Date().getFullYear();
    }

    // Contact form submission
    if (contactForm) {
        contactForm.addEventListener('submit', function(e) {
            e.preventDefault();
            alert('Thank you for your message! I will get back to you soon.');
            this.reset();
        });
    }

    // Initialize animations
    window.addEventListener('load', () => {
        animateOnScroll();
        animateSkills();
    });
    window.addEventListener('scroll', () => {
        animateOnScroll();
        animateSkills();
    });

    // Start terminal
    initTerminal();
});
